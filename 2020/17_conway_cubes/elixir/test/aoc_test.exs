defmodule AocTest do
  use ExUnit.Case
  doctest Aoc

  test "gets adjacent 26" do
    assert Aoc.get_adj(%{{0, 0, 0} => true}, {0, 0, 0}) == %{
             {-1, -1, -1} => nil,
             {-1, -1, 0} => nil,
             {-1, -1, 1} => nil,
             {-1, 0, -1} => nil,
             {-1, 0, 0} => nil,
             {-1, 0, 1} => nil,
             {-1, 1, -1} => nil,
             {-1, 1, 0} => nil,
             {-1, 1, 1} => nil,
             {0, -1, -1} => nil,
             {0, -1, 0} => nil,
             {0, -1, 1} => nil,
             {0, 0, -1} => nil,
             {0, 0, 1} => nil,
             {0, 1, -1} => nil,
             {0, 1, 0} => nil,
             {0, 1, 1} => nil,
             {1, -1, -1} => nil,
             {1, -1, 0} => nil,
             {1, -1, 1} => nil,
             {1, 0, -1} => nil,
             {1, 0, 0} => nil,
             {1, 0, 1} => nil,
             {1, 1, -1} => nil,
             {1, 1, 0} => nil,
             {1, 1, 1} => nil
           }
  end

  test "pads a map" do
    assert Aoc.pad_map(%{{0, 0, 0} => true, {0, 1, 0} => true}) ==
             %{
               {-1, -1, -1} => nil,
               {0, -1, -1} => nil,
               {-1, 2, 0} => nil,
               {-1, 0, -1} => nil,
               {1, 0, 0} => nil,
               {1, 0, 1} => nil,
               {-1, 2, -1} => nil,
               {0, -1, 0} => nil,
               {-1, -1, 0} => nil,
               {-1, 2, 1} => nil,
               {-1, 1, -1} => nil,
               {-1, -1, 1} => nil,
               {1, 2, 1} => nil,
               {1, -1, 0} => nil,
               {-1, 0, 1} => nil,
               {0, 2, 0} => nil,
               {0, 1, -1} => nil,
               {0, 2, -1} => nil,
               {1, 2, -1} => nil,
               {0, 1, 0} => true,
               {1, 2, 0} => nil,
               {1, 0, -1} => nil,
               {1, 1, -1} => nil,
               {0, 0, 1} => nil,
               {1, -1, 1} => nil,
               {1, 1, 0} => nil,
               {-1, 0, 0} => nil,
               {0, 1, 1} => nil,
               {1, -1, -1} => nil,
               {0, 0, -1} => nil,
               {-1, 1, 1} => nil,
               {1, 1, 1} => nil,
               {-1, 1, 0} => nil,
               {0, -1, 1} => nil,
               {0, 2, 1} => nil,
               {0, 0, 0} => true
             }
  end
end
