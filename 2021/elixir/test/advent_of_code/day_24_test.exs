defmodule AdventOfCode.Day24Test do
  use ExUnit.Case

  import AdventOfCode.Day24

  test "part1" do
    input = [
      "inp w",
      "mul x 0",
      "add x z",
      "mod x 26",
      "div z 1",
      "add x 13",
      "eql x w",
      "eql x 0",
      "mul y 0",
      "add y 25",
      "mul y x",
      "add y 1",
      "mul z y",
      "mul y 0",
      "add y w",
      "add y 15",
      "mul y x",
      "add z y",
      "inp w",
      "mul x 0",
      "add x z",
      "mod x 26",
      "div z 1",
      "add x 13",
      "eql x w",
      "eql x 0",
      "mul y 0",
      "add y 25",
      "mul y x",
      "add y 1",
      "mul z y",
      "mul y 0",
      "add y w",
      "add y 16",
      "mul y x",
      "add z y",
      "inp w",
      "mul x 0",
      "add x z",
      "mod x 26",
      "div z 1",
      "add x 10",
      "eql x w",
      "eql x 0",
      "mul y 0",
      "add y 25",
      "mul y x",
      "add y 1",
      "mul z y",
      "mul y 0",
      "add y w",
      "add y 4",
      "mul y x",
      "add z y",
      "inp w",
      "mul x 0",
      "add x z",
      "mod x 26",
      "div z 1",
      "add x 15",
      "eql x w",
      "eql x 0",
      "mul y 0",
      "add y 25",
      "mul y x",
      "add y 1",
      "mul z y",
      "mul y 0",
      "add y w",
      "add y 14",
      "mul y x",
      "add z y",
      "inp w",
      "mul x 0",
      "add x z",
      "mod x 26",
      "div z 26",
      "add x -8",
      "eql x w",
      "eql x 0",
      "mul y 0",
      "add y 25",
      "mul y x",
      "add y 1",
      "mul z y",
      "mul y 0",
      "add y w",
      "add y 1",
      "mul y x",
      "add z y",
      "inp w",
      "mul x 0",
      "add x z",
      "mod x 26",
      "div z 26",
      "add x -10",
      "eql x w",
      "eql x 0",
      "mul y 0",
      "add y 25",
      "mul y x",
      "add y 1",
      "mul z y",
      "mul y 0",
      "add y w",
      "add y 5",
      "mul y x",
      "add z y",
      "inp w",
      "mul x 0",
      "add x z",
      "mod x 26",
      "div z 1",
      "add x 11",
      "eql x w",
      "eql x 0",
      "mul y 0",
      "add y 25",
      "mul y x",
      "add y 1",
      "mul z y",
      "mul y 0",
      "add y w",
      "add y 1",
      "mul y x",
      "add z y",
      "inp w",
      "mul x 0",
      "add x z",
      "mod x 26",
      "div z 26",
      "add x -3",
      "eql x w",
      "eql x 0",
      "mul y 0",
      "add y 25",
      "mul y x",
      "add y 1",
      "mul z y",
      "mul y 0",
      "add y w",
      "add y 3",
      "mul y x",
      "add z y",
      "inp w",
      "mul x 0",
      "add x z",
      "mod x 26",
      "div z 1",
      "add x 14",
      "eql x w",
      "eql x 0",
      "mul y 0",
      "add y 25",
      "mul y x",
      "add y 1",
      "mul z y",
      "mul y 0",
      "add y w",
      "add y 3",
      "mul y x",
      "add z y",
      "inp w",
      "mul x 0",
      "add x z",
      "mod x 26",
      "div z 26",
      "add x -4",
      "eql x w",
      "eql x 0",
      "mul y 0",
      "add y 25",
      "mul y x",
      "add y 1",
      "mul z y",
      "mul y 0",
      "add y w",
      "add y 7",
      "mul y x",
      "add z y",
      "inp w",
      "mul x 0",
      "add x z",
      "mod x 26",
      "div z 1",
      "add x 14",
      "eql x w",
      "eql x 0",
      "mul y 0",
      "add y 25",
      "mul y x",
      "add y 1",
      "mul z y",
      "mul y 0",
      "add y w",
      "add y 5",
      "mul y x",
      "add z y",
      "inp w",
      "mul x 0",
      "add x z",
      "mod x 26",
      "div z 26",
      "add x -5",
      "eql x w",
      "eql x 0",
      "mul y 0",
      "add y 25",
      "mul y x",
      "add y 1",
      "mul z y",
      "mul y 0",
      "add y w",
      "add y 13",
      "mul y x",
      "add z y",
      "inp w",
      "mul x 0",
      "add x z",
      "mod x 26",
      "div z 26",
      "add x -8",
      "eql x w",
      "eql x 0",
      "mul y 0",
      "add y 25",
      "mul y x",
      "add y 1",
      "mul z y",
      "mul y 0",
      "add y w",
      "add y 3",
      "mul y x",
      "add z y",
      "inp w",
      "mul x 0",
      "add x z",
      "mod x 26",
      "div z 26",
      "add x -11",
      "eql x w",
      "eql x 0",
      "mul y 0",
      "add y 25",
      "mul y x",
      "add y 1",
      "mul z y",
      "mul y 0",
      "add y w",
      "add y 10",
      "mul y x",
      "add z y"
    ]

    result = parse_function_parameters(input)

    assert result ==
             [
               {1, 13, 15},
               {1, 13, 16},
               {1, 10, 4},
               {1, 15, 14},
               {26, -8, 1},
               {26, -10, 5},
               {1, 11, 1},
               {26, -3, 3},
               {1, 14, 3},
               {26, -4, 7},
               {1, 14, 5},
               {26, -5, 13},
               {26, -8, 3},
               {26, -11, 10}
             ]

    result = part1(input)

    assert result == 51_939_397_989_999
  end

  test "part2" do
    input = [
      "inp w",
      "mul x 0",
      "add x z",
      "mod x 26",
      "div z 1",
      "add x 13",
      "eql x w",
      "eql x 0",
      "mul y 0",
      "add y 25",
      "mul y x",
      "add y 1",
      "mul z y",
      "mul y 0",
      "add y w",
      "add y 15",
      "mul y x",
      "add z y",
      "inp w",
      "mul x 0",
      "add x z",
      "modx 26",
      "div z 1",
      "add x 13",
      "eql x w",
      "eql x 0",
      "mul y 0",
      "add y 25",
      "mul y x",
      "add y 1",
      "mul z y",
      "mul y 0",
      "add y w",
      "add y 16",
      "mul y x",
      "add z y",
      "inp w",
      "mul x 0",
      "add x z",
      "mod x 26",
      "div z 1",
      "add x 10",
      "eql x w",
      "eql x 0",
      "mul y 0",
      "add y 25",
      "mul y x",
      "add y 1",
      "mul z y",
      "mul y 0",
      "add y w",
      "add y 4",
      "mul y x",
      "add z y",
      "inp w",
      "mul x 0",
      "add x z",
      "mod x 26",
      "div z 1",
      "add x 15",
      "eql x w",
      "eql x 0",
      "mul y 0",
      "add y 25",
      "mul y x",
      "add y 1",
      "mul z y",
      "mul y 0",
      "add y w",
      "add y 14",
      "mul y x",
      "add z y",
      "inp w",
      "mul x 0",
      "add x z",
      "mod x 26",
      "div z 26",
      "add x -8",
      "eql x w",
      "eql x 0",
      "mul y 0",
      "add y 25",
      "mul y x",
      "add y 1",
      "mul z y",
      "mul y 0",
      "add y w",
      "add y 1",
      "mul y x",
      "add z y",
      "inp w",
      "mul x 0",
      "add x z",
      "mod x 26",
      "div z 26",
      "add x -10",
      "eql x w",
      "eql x 0",
      "mul y 0",
      "add y 25",
      "mul y x",
      "add y 1",
      "mul z y",
      "mul y 0",
      "add y w",
      "add y 5",
      "mul y x",
      "add z y",
      "inp w",
      "mul x 0",
      "add x z",
      "mod x 26",
      "div z 1",
      "add x 11",
      "eql x w",
      "eql x 0",
      "mul y 0",
      "add y 25",
      "mul y x",
      "add y 1",
      "mul z y",
      "mul y 0",
      "add y w",
      "add y 1",
      "mul y x",
      "add z y",
      "inp w",
      "mul x 0",
      "add x z",
      "mod x 26",
      "div z 26",
      "add x -3",
      "eql x w",
      "eql x 0",
      "mul y 0",
      "add y 25",
      "mul y x",
      "add y 1",
      "mul z y",
      "mul y 0",
      "add y w",
      "add y 3",
      "mul y x",
      "add z y",
      "inp w",
      "mul x 0",
      "add x z",
      "mod x 26",
      "div z 1",
      "add x 14",
      "eql x w",
      "eql x 0",
      "mul y 0",
      "add y 25",
      "mul y x",
      "add y 1",
      "mul z y",
      "mul y 0",
      "add y w",
      "add y 3",
      "mul y x",
      "add z y",
      "inp w",
      "mul x 0",
      "add x z",
      "mod x 26",
      "div z 26",
      "add x -4",
      "eql x w",
      "eql x 0",
      "mul y 0",
      "add y 25",
      "mul y x",
      "add y 1",
      "mul z y",
      "mul y 0",
      "add y w",
      "add y 7",
      "mul y x",
      "add z y",
      "inp w",
      "mul x 0",
      "add x z",
      "mod x 26",
      "div z 1",
      "add x 14",
      "eql x w",
      "eql x 0",
      "mul y 0",
      "add y 25",
      "mul y x",
      "add y 1",
      "mul z y",
      "mul y 0",
      "add y w",
      "add y 5",
      "mul y x",
      "add z y",
      "inp w",
      "mul x 0",
      "add x z",
      "mod x 26",
      "div z 26",
      "add x -5",
      "eql x w",
      "eql x 0",
      "mul y 0",
      "add y 25",
      "mul y x",
      "add y 1",
      "mul z y",
      "mul y 0",
      "add y w",
      "add y 13",
      "mul y x",
      "add z y",
      "inp w",
      "mul x 0",
      "add x z",
      "mod x 26",
      "div z 26",
      "add x -8",
      "eql x w",
      "eql x 0",
      "mul y 0",
      "add y 25",
      "mul y x",
      "add y 1",
      "mul z y",
      "mul y 0",
      "add y w",
      "add y 3",
      "mul y x",
      "add z y",
      "inp w",
      "mul x 0",
      "add x z",
      "mod x 26",
      "div z 26",
      "add x -11",
      "eql x w",
      "eql x 0",
      "mul y 0",
      "add y 25",
      "mul y x",
      "add y 1",
      "mul z y",
      "mul y 0",
      "add y w",
      "add y 10",
      "mul y x",
      "add z y"
    ]

    result = part2(input)

    assert result == 11_717_131_211_195
  end
end
